name: "[fake-gcs-server] Promote to Production"
on:
  workflow_dispatch:
    inputs:
      commit-sha:
        description: 'Commit SHA to deploy'
        required: true
        type: string
    
permissions:
  contents: read
  actions: read
  pull-requests: write  
  
env:
  BUCKET_NAME: ${{ secrets.BUCKET_NAME }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GH_TOKEN: ${{ secrets.GH_TOKEN }}
  
jobs:
  preview:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' }}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set SHA
        run: echo "MAIN_SHA=${{ inputs.commit-sha }}" >> $GITHUB_ENV

      # Start fake GCS server
      - name: Setup fake GCS server
        uses: fsouza/fake-gcs-action@v0.4.1
        with:
          version: latest
          port: 4443
          log-level: info

      # Override GCS to use fake server and configure gsutil
      - name: Configure fake GCS environment
        run: |
          echo "STORAGE_EMULATOR_HOST=localhost:4443" >> $GITHUB_ENV
          echo "GOOGLE_CLOUD_PROJECT=fake-project" >> $GITHUB_ENV
          
          # Verify fake GCS server is running
          echo "Testing fake GCS server connectivity..."
          curl -f http://localhost:4443/storage/v1/b || echo "Fake GCS server not responding"
          
          # Configure gsutil to use fake GCS server
          mkdir -p ~/.config/gcloud
          cat > ~/.boto << EOF
          [Credentials]
          gs_json_host = 127.0.0.1
          gs_json_port = 4443
          
          [Boto]
          https_validate_certificates = False
          EOF

      # Get run ID and artifact name (inline from your action)
      - name: Get run ID and artifact name
        id: resolve
        uses: actions/github-script@v8
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const sha = process.env.MAIN_SHA;
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            async function findRunFor(event) {
              const { data } = await github.request(
                'GET /repos/{owner}/{repo}/actions/runs',
                { owner, repo, head_sha: sha, event, per_page: 1 }
              );
              return data.workflow_runs?.[0]?.id || null;
            }

            // Try push, then merge_group
            let runId = await findRunFor('push');
            if (!runId) core.setFailed(`No workflow run found for ${sha} (push/merge_group)`);

            // List artifacts
            const { data: arts } = await github.request(
              'GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts',
              { owner, repo, run_id: runId, per_page: 100 }
            );

            // Get artifacts artifacts-${sha}
            const name = `artifacts-${sha}`;
            const artifact = arts.artifacts.find(a => a.name === name);
            if (!artifact) core.setFailed(`Artifact ${name} not found on run ${runId}`);

            core.setOutput('run_id', String(runId));
            core.setOutput('artifact_name', name);

      # Download artifact
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          run-id: ${{ steps.resolve.outputs.run_id }}
          name: ${{ steps.resolve.outputs.artifact_name }}
          path: ./artifact
          github-token: ${{ secrets.GITHUB_TOKEN }}

      # Setup Bun
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
    
      # Install dependencies
      - name: Install dependencies
        run: bun install && bun link

      # Set up Cloud SDK (no authentication needed with fake GCS)
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3

      # Find config file
      - name: Find config file
        id: find-config
        run: |
          CONFIG_FILE=$(find ./artifact -name '*.json' | head -n 1)
          echo "config-file=$CONFIG_FILE" >> $GITHUB_OUTPUT
          echo "Using config file: $CONFIG_FILE"

      # Create test bucket
      - name: Create test bucket
        run: |
          echo "Creating bucket with fake GCS configuration..."
          gsutil mb gs://${{ env.BUCKET_NAME }}/ || echo "Bucket already exists"

      # Verify Service Account Access
      - name: Verify Service Account Access
        run: |
          echo "Bucket access (using fake GCS):"
          echo "Checking gsutil configuration..."
          gsutil version -l
          echo "Listing bucket contents..."
          gsutil ls gs://${{ env.BUCKET_NAME }}/ && echo "Bucket access verified"

      # Preview Changes
      - name: Preview Changes
        run: buninator preview "${{ steps.find-config.outputs.config-file }}"

  deploy:
    if: ${{ github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    environment: prod
    needs: preview
    concurrency:
      group: prod
      cancel-in-progress: true
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set SHA
        run: echo "MAIN_SHA=${{ inputs.commit-sha }}" >> $GITHUB_ENV

      # Start fake GCS server
      - name: Setup fake GCS server
        uses: fsouza/fake-gcs-action@v0.4.1
        with:
          version: latest
          port: 4443
          log-level: info

      # Override GCS to use fake server and configure gsutil
      - name: Configure fake GCS environment
        run: |
          echo "STORAGE_EMULATOR_HOST=localhost:4443" >> $GITHUB_ENV
          echo "GOOGLE_CLOUD_PROJECT=fake-project" >> $GITHUB_ENV
          
          # Configure gsutil to use fake GCS server
          mkdir -p ~/.config/gcloud
          cat > ~/.boto << EOF
          [Credentials]
          gs_json_host = 127.0.0.1
          gs_json_port = 4443
          
          [Boto]
          https_validate_certificates = False
          EOF

      # Get run ID and artifact name (inline from your action)
      - name: Get run ID and artifact name
        id: resolve
        uses: actions/github-script@v8
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const sha = process.env.MAIN_SHA;
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            async function findRunFor(event) {
              const { data } = await github.request(
                'GET /repos/{owner}/{repo}/actions/runs',
                { owner, repo, head_sha: sha, event, per_page: 1 }
              );
              return data.workflow_runs?.[0]?.id || null;
            }

            // Try push, then merge_group
            let runId = await findRunFor('push');
            if (!runId) core.setFailed(`No workflow run found for ${sha} (push/merge_group)`);

            // List artifacts
            const { data: arts } = await github.request(
              'GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts',
              { owner, repo, run_id: runId, per_page: 100 }
            );

            // Get artifacts artifacts-${sha}
            const name = `artifacts-${sha}`;
            const artifact = arts.artifacts.find(a => a.name === name);
            if (!artifact) core.setFailed(`Artifact ${name} not found on run ${runId}`);

            core.setOutput('run_id', String(runId));
            core.setOutput('artifact_name', name);

      # Download artifact
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          run-id: ${{ steps.resolve.outputs.run_id }}
          name: ${{ steps.resolve.outputs.artifact_name }}
          path: ./artifact
          github-token: ${{ secrets.GITHUB_TOKEN }}

      # Setup Bun
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
    
      # Install dependencies
      - name: Install dependencies
        run: bun install && bun link

      # Set up Cloud SDK (no authentication needed with fake GCS)
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3

      # Find config file
      - name: Find config file
        id: find-config
        run: |
          CONFIG_FILE=$(find ./artifact -name '*.json' | head -n 1)
          echo "config-file=$CONFIG_FILE" >> $GITHUB_OUTPUT
          echo "Using config file: $CONFIG_FILE"

      # Create test bucket
      - name: Create test bucket
        run: |
          echo "Creating bucket with fake GCS configuration..."
          gsutil mb gs://${{ env.BUCKET_NAME }}/ || echo "Bucket already exists"

      # Deploy Configuration
      - name: Deploy Configuration
        run: |
          CONFIG_FILE="${{ steps.find-config.outputs.config-file }}"
          echo "ðŸš€ Deploying $CONFIG_FILE to gs://${{ env.BUCKET_NAME }}/$(basename $CONFIG_FILE) (fake GCS)"
          buninator deploy "$CONFIG_FILE"

      # Generate Deployment Summary
      - name: Generate Deployment Summary
        run: |
          CONFIG_FILE="${{ steps.find-config.outputs.config-file }}"
          cat >> $GITHUB_STEP_SUMMARY << EOF
          # âœ… Deployment Successful (Fake GCS)
          **File:** \`$(basename $CONFIG_FILE)\`
          **Timestamp:** \`$(date -Iseconds)\`
          **Requester:** \`${{ github.actor }}\`
          **Workflow:** [\`${{ github.run_id }}\`](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          **Note:** Deployed to fake GCS server for testing
          EOF